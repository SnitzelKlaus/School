//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DatabaseFirst
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class LufthavnDbEntities : DbContext
    {
        public LufthavnDbEntities()
            : base("name=LufthavnDbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AirPort> AirPorts { get; set; }
        public virtual DbSet<AirportRoute> AirportRoutes { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<Plane> Planes { get; set; }
        public virtual DbSet<Route> Routes { get; set; }
    
        public virtual int spAirport_Create(string iATA, string name, string address)
        {
            var iATAParameter = iATA != null ?
                new ObjectParameter("IATA", iATA) :
                new ObjectParameter("IATA", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAirport_Create", iATAParameter, nameParameter, addressParameter);
        }
    
        public virtual int spAirport_Route_Create(string iATA, Nullable<int> routeId)
        {
            var iATAParameter = iATA != null ?
                new ObjectParameter("IATA", iATA) :
                new ObjectParameter("IATA", typeof(string));
    
            var routeIdParameter = routeId.HasValue ?
                new ObjectParameter("RouteId", routeId) :
                new ObjectParameter("RouteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAirport_Route_Create", iATAParameter, routeIdParameter);
        }
    
        public virtual int spCompany_Create(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCompany_Create", nameParameter);
        }
    
        public virtual int spCompanyAndRoute_Create(string companyName)
        {
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCompanyAndRoute_Create", companyNameParameter);
        }
    
        public virtual int spPlane_Create(string serialNum, Nullable<int> companyId, Nullable<int> routeId, string aITA)
        {
            var serialNumParameter = serialNum != null ?
                new ObjectParameter("SerialNum", serialNum) :
                new ObjectParameter("SerialNum", typeof(string));
    
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            var routeIdParameter = routeId.HasValue ?
                new ObjectParameter("RouteId", routeId) :
                new ObjectParameter("RouteId", typeof(int));
    
            var aITAParameter = aITA != null ?
                new ObjectParameter("AITA", aITA) :
                new ObjectParameter("AITA", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPlane_Create", serialNumParameter, companyIdParameter, routeIdParameter, aITAParameter);
        }
    
        public virtual int spRoute_Create(Nullable<int> companyId)
        {
            var companyIdParameter = companyId.HasValue ?
                new ObjectParameter("CompanyId", companyId) :
                new ObjectParameter("CompanyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRoute_Create", companyIdParameter);
        }
    }
}
