@page "/datagrid"
@using System.ComponentModel
@using System.Collections.ObjectModel
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<h1>Works about 69/420 at a time</h1>

<InputFile class="btn bg-light text-black" OnChange="@AddFile" />
<a class="btn bg-warning text-black" @onclick="() => SaveFiles()">Save Changes</a>
<a class="btn bg-dark text-white" @onclick="() => GetFiles()">Undo Changes</a>

<table class="table">
    <thead>
        <tr>
            <th></th>
            <th>Name:</th>
            <th>Date:</th>
            <th>Image:</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var data in GridData)
        {
            <tr>
                <td><a class="btn bg-danger text-white" @onclick="() => DelFile(data.Id)">X</a></td>
                <td>@data.Name</td>
                <td>@data.LastModified</td>
                <td><img width="100" height="100" src="@ConvertBase64(data.Data)"/></td>
                <td><a class="btn bg-success text-white" @onclick="() => ActivateEdit(data.Id)">Edit</a></td>
            </tr>
            if (data.IsEditActivated)
            {

                <tr>
                    <td class="form-inline py-3">
                        <EditForm Model="data">
                            <div class="mb-2">
                                <InputText id="name" @bind-Value="data.Name" placeholder="Enter Name"></InputText>
                            </div>
                            <a class="btn bg-info text-white">Update</a>
                        </EditForm>
                    </td>
                    <td></td>
                    <td></td>
                    <td></td>
                    <td></td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    public ObservableCollection<File> GridData { get; set; } = new ObservableCollection<File>();
    private Guid _userEditId { get; set; }


    protected override async void OnInitialized()
    {
        await GetFiles();
    }

    private void ActivateEdit(Guid guid)
    {
        foreach(var file in GridData)
        {
            if(file.Id == guid)
            {
                if (!file.IsEditActivated)
                    file.IsEditActivated = true;
                else
                    file.IsEditActivated = false;
                break;
            }
        }
    }

    private async Task AddFile(InputFileChangeEventArgs e)
    {
        MemoryStream ms = new MemoryStream();
        await e.File.OpenReadStream().CopyToAsync(ms);
        byte[] bytes = ms.ToArray();

        var file = new File(Guid.NewGuid(), e.File.Name, e.File.ContentType, e.File.Size, bytes, DateTime.Now, false);

        GridData.Add(file);
    }

    private void DelFile(Guid guid)
    {
        var gridData = GridData.Where(x => x.Id != guid);
        GridData = new ObservableCollection<File>(gridData);
    }

    private async Task GetFiles()
    {
        if (await localStorage.ContainKeyAsync("files"))
        {
            GridData = await localStorage.GetItemAsync<ObservableCollection<File>>("files");
        }
    }

    private async Task SaveFiles()
    {
        await localStorage.SetItemAsync("files", GridData);
    }

    private async Task ClearFiles()
    {
        await localStorage.ClearAsync();
    }

    private string ConvertBase64(byte[] bytes)
    {
        var base64 = Convert.ToBase64String(bytes);
        return String.Format("data:image/gif;base64,{0}", base64);
    }
}
